package com.cheng.fitness.utils.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cheng.fitness.model.CourseBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_BEAN".
*/
public class CourseBeanDao extends AbstractDao<CourseBean, Long> {

    public static final String TABLENAME = "COURSE_BEAN";

    /**
     * Properties of entity CourseBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property HasAppliance = new Property(2, boolean.class, "hasAppliance", false, "HAS_APPLIANCE");
        public final static Property ExercisePosition = new Property(3, String.class, "exercisePosition", false, "EXERCISE_POSITION");
        public final static Property ImageUrl = new Property(4, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Time = new Property(5, int.class, "time", false, "TIME");
        public final static Property Strength = new Property(6, String.class, "strength", false, "STRENGTH");
        public final static Property TvExpend = new Property(7, int.class, "tvExpend", false, "TV_EXPEND");
        public final static Property Detail = new Property(8, String.class, "detail", false, "DETAIL");
        public final static Property Category = new Property(9, String.class, "category", false, "CATEGORY");
        public final static Property HasAddPlan = new Property(10, boolean.class, "hasAddPlan", false, "HAS_ADD_PLAN");
    };


    public CourseBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CourseBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"HAS_APPLIANCE\" INTEGER NOT NULL ," + // 2: hasAppliance
                "\"EXERCISE_POSITION\" TEXT," + // 3: exercisePosition
                "\"IMAGE_URL\" TEXT," + // 4: imageUrl
                "\"TIME\" INTEGER NOT NULL ," + // 5: time
                "\"STRENGTH\" TEXT," + // 6: strength
                "\"TV_EXPEND\" INTEGER NOT NULL ," + // 7: tvExpend
                "\"DETAIL\" TEXT," + // 8: detail
                "\"CATEGORY\" TEXT," + // 9: category
                "\"HAS_ADD_PLAN\" INTEGER NOT NULL );"); // 10: hasAddPlan
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getHasAppliance() ? 1L: 0L);
 
        String exercisePosition = entity.getExercisePosition();
        if (exercisePosition != null) {
            stmt.bindString(4, exercisePosition);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
        stmt.bindLong(6, entity.getTime());
 
        String strength = entity.getStrength();
        if (strength != null) {
            stmt.bindString(7, strength);
        }
        stmt.bindLong(8, entity.getTvExpend());
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(9, detail);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(10, category);
        }
        stmt.bindLong(11, entity.getHasAddPlan() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getHasAppliance() ? 1L: 0L);
 
        String exercisePosition = entity.getExercisePosition();
        if (exercisePosition != null) {
            stmt.bindString(4, exercisePosition);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
        stmt.bindLong(6, entity.getTime());
 
        String strength = entity.getStrength();
        if (strength != null) {
            stmt.bindString(7, strength);
        }
        stmt.bindLong(8, entity.getTvExpend());
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(9, detail);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(10, category);
        }
        stmt.bindLong(11, entity.getHasAddPlan() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CourseBean readEntity(Cursor cursor, int offset) {
        CourseBean entity = new CourseBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getShort(offset + 2) != 0, // hasAppliance
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // exercisePosition
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageUrl
            cursor.getInt(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // strength
            cursor.getInt(offset + 7), // tvExpend
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // detail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // category
            cursor.getShort(offset + 10) != 0 // hasAddPlan
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHasAppliance(cursor.getShort(offset + 2) != 0);
        entity.setExercisePosition(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.getInt(offset + 5));
        entity.setStrength(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTvExpend(cursor.getInt(offset + 7));
        entity.setDetail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCategory(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHasAddPlan(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CourseBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CourseBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
